package com.example.dynamodbwriter.service;

import java.util.*;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

import io.github.resilience4j.ratelimiter.annotation.RateLimiter;
import io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker;

import software.amazon.awssdk.services.dynamodb.DynamoDbClient;
import software.amazon.awssdk.services.dynamodb.model.*;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Service
public class DynamoDBWriterService {

    private static final Logger logger = LoggerFactory.getLogger(DynamoDBWriterService.class);

    private final DynamoDbClient dynamoDbClient;
    private final String tableName = "YourTableName"; // Replace with your actual table name

    public DynamoDBWriterService(DynamoDbClient dynamoDbClient) {
        this.dynamoDbClient = dynamoDbClient;
    }

    @RateLimiter(name = "dynamoRateLimiter")
    @CircuitBreaker(name = "dynamoCircuitBreaker", fallbackMethod = "fallbackWriteItems")
    public void writeItems(List<Map<String, AttributeValue>> itemsToWrite) {
        List<List<Map<String, AttributeValue>>> batches = partitionList(itemsToWrite, 25);

        for (List<Map<String, AttributeValue>> batch : batches) {
            writeBatch(batch);
        }
    }

    private void writeBatch(List<Map<String, AttributeValue>> batch) {
        Map<String, List<WriteRequest>> requestItems = new HashMap<>();
        List<WriteRequest> writeRequests = batch.stream()
                .map(item -> WriteRequest.builder()
                        .putRequest(PutRequest.builder().item(item).build())
                        .build())
                .collect(Collectors.toList());

        requestItems.put(tableName, writeRequests);

        BatchWriteItemRequest batchWriteItemRequest = BatchWriteItemRequest.builder()
                .requestItems(requestItems)
                .build();

        try {
            BatchWriteItemResponse response = dynamoDbClient.batchWriteItem(batchWriteItemRequest);

            // Handle unprocessed items
            Map<String, List<WriteRequest>> unprocessedItems = response.unprocessedItems();

            while (unprocessedItems != null && !unprocessedItems.isEmpty()) {
                logger.warn("Retrying unprocessed items: {}", unprocessedItems.size());

                BatchWriteItemRequest retryRequest = BatchWriteItemRequest.builder()
                        .requestItems(unprocessedItems)
                        .build();

                response = dynamoDbClient.batchWriteItem(retryRequest);
                unprocessedItems = response.unprocessedItems();
            }
        } catch (DynamoDbException e) {
            logger.error("DynamoDB exception during batch write: ", e);
            throw e;
        }
    }

    // Fallback method for circuit breaker
    public void fallbackWriteItems(List<Map<String, AttributeValue>> itemsToWrite, Throwable throwable) {
        logger.error("Circuit breaker opened or exception occurred: ", throwable);
        // Implement fallback logic here, such as logging or alerting
    }

    // Utility method to partition the list into batches
    private static <T> List<List<T>> partitionList(List<T> list, int size) {
        List<List<T>> partitions = new ArrayList<>();
        int i = 0;
        int totalSize = list.size();
        while (i < totalSize) {
            partitions.add(list.subList(i, Math.min(totalSize, i + size)));
            i += size;
        }
        return partitions;
    }
}
